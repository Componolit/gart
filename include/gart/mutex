#pragma once

#include <pthread.h>

namespace std {
    class mutex;
    template <class Mutex> class lock_guard;
}

class std::mutex {

        pthread_mutex_t _mutex;

    public:

        std::mutex& operator=(const std::mutex& other) = delete;
        mutex(const std::mutex& mtx) : _mutex (mtx._mutex) { }
        mutex() : _mutex (PTHREAD_MUTEX_INITIALIZER) { }

        ~mutex()
        {
            pthread_mutex_destroy (&_mutex);
        }

        void lock(void)
        {
            pthread_mutex_lock (&_mutex);
        };

        void unlock(void)
        {
            pthread_mutex_unlock (&_mutex);
        };
};

template <class Mutex>
class std::lock_guard : Genode::Lock_guard<Mutex> {

    public:

        lock_guard (Mutex m)
        :
            Genode::Lock_guard<Mutex>(m)
        { };
};
